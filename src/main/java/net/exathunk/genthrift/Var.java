/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.exathunk.genthrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A union of concrete variable types, to be accompanied by a VarType
 */
public class Var implements org.apache.thrift.TBase<Var, Var._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Var");

  private static final org.apache.thrift.protocol.TField BOOL_VAR_FIELD_DESC = new org.apache.thrift.protocol.TField("boolVar", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BYTE_VAR_FIELD_DESC = new org.apache.thrift.protocol.TField("byteVar", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField I16_VAR_FIELD_DESC = new org.apache.thrift.protocol.TField("i16Var", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField I32_VAR_FIELD_DESC = new org.apache.thrift.protocol.TField("i32Var", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField I64_VAR_FIELD_DESC = new org.apache.thrift.protocol.TField("i64Var", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_VAR_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleVar", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_VAR_FIELD_DESC = new org.apache.thrift.protocol.TField("stringVar", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BINARY_VAR_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryVar", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VarStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VarTupleSchemeFactory());
  }

  private boolean boolVar; // optional
  private byte byteVar; // optional
  private short i16Var; // optional
  private int i32Var; // optional
  private long i64Var; // optional
  private double doubleVar; // optional
  private String stringVar; // optional
  private ByteBuffer binaryVar; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_VAR((short)1, "boolVar"),
    BYTE_VAR((short)2, "byteVar"),
    I16_VAR((short)3, "i16Var"),
    I32_VAR((short)4, "i32Var"),
    I64_VAR((short)5, "i64Var"),
    DOUBLE_VAR((short)6, "doubleVar"),
    STRING_VAR((short)7, "stringVar"),
    BINARY_VAR((short)8, "binaryVar");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_VAR
          return BOOL_VAR;
        case 2: // BYTE_VAR
          return BYTE_VAR;
        case 3: // I16_VAR
          return I16_VAR;
        case 4: // I32_VAR
          return I32_VAR;
        case 5: // I64_VAR
          return I64_VAR;
        case 6: // DOUBLE_VAR
          return DOUBLE_VAR;
        case 7: // STRING_VAR
          return STRING_VAR;
        case 8: // BINARY_VAR
          return BINARY_VAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLVAR_ISSET_ID = 0;
  private static final int __BYTEVAR_ISSET_ID = 1;
  private static final int __I16VAR_ISSET_ID = 2;
  private static final int __I32VAR_ISSET_ID = 3;
  private static final int __I64VAR_ISSET_ID = 4;
  private static final int __DOUBLEVAR_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  private _Fields optionals[] = {_Fields.BOOL_VAR,_Fields.BYTE_VAR,_Fields.I16_VAR,_Fields.I32_VAR,_Fields.I64_VAR,_Fields.DOUBLE_VAR,_Fields.STRING_VAR,_Fields.BINARY_VAR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_VAR, new org.apache.thrift.meta_data.FieldMetaData("boolVar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_VAR, new org.apache.thrift.meta_data.FieldMetaData("byteVar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.I16_VAR, new org.apache.thrift.meta_data.FieldMetaData("i16Var", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.I32_VAR, new org.apache.thrift.meta_data.FieldMetaData("i32Var", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I64_VAR, new org.apache.thrift.meta_data.FieldMetaData("i64Var", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_VAR, new org.apache.thrift.meta_data.FieldMetaData("doubleVar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_VAR, new org.apache.thrift.meta_data.FieldMetaData("stringVar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BINARY_VAR, new org.apache.thrift.meta_data.FieldMetaData("binaryVar", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Var.class, metaDataMap);
  }

  public Var() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Var(Var other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.boolVar = other.boolVar;
    this.byteVar = other.byteVar;
    this.i16Var = other.i16Var;
    this.i32Var = other.i32Var;
    this.i64Var = other.i64Var;
    this.doubleVar = other.doubleVar;
    if (other.isSetStringVar()) {
      this.stringVar = other.stringVar;
    }
    if (other.isSetBinaryVar()) {
      this.binaryVar = org.apache.thrift.TBaseHelper.copyBinary(other.binaryVar);
;
    }
  }

  public Var deepCopy() {
    return new Var(this);
  }

  @Override
  public void clear() {
    setBoolVarIsSet(false);
    this.boolVar = false;
    setByteVarIsSet(false);
    this.byteVar = 0;
    setI16VarIsSet(false);
    this.i16Var = 0;
    setI32VarIsSet(false);
    this.i32Var = 0;
    setI64VarIsSet(false);
    this.i64Var = 0;
    setDoubleVarIsSet(false);
    this.doubleVar = 0.0;
    this.stringVar = null;
    this.binaryVar = null;
  }

  public boolean isBoolVar() {
    return this.boolVar;
  }

  public void setBoolVar(boolean boolVar) {
    this.boolVar = boolVar;
    setBoolVarIsSet(true);
  }

  public void unsetBoolVar() {
    __isset_bit_vector.clear(__BOOLVAR_ISSET_ID);
  }

  /** Returns true if field boolVar is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolVar() {
    return __isset_bit_vector.get(__BOOLVAR_ISSET_ID);
  }

  public void setBoolVarIsSet(boolean value) {
    __isset_bit_vector.set(__BOOLVAR_ISSET_ID, value);
  }

  public byte getByteVar() {
    return this.byteVar;
  }

  public void setByteVar(byte byteVar) {
    this.byteVar = byteVar;
    setByteVarIsSet(true);
  }

  public void unsetByteVar() {
    __isset_bit_vector.clear(__BYTEVAR_ISSET_ID);
  }

  /** Returns true if field byteVar is set (has been assigned a value) and false otherwise */
  public boolean isSetByteVar() {
    return __isset_bit_vector.get(__BYTEVAR_ISSET_ID);
  }

  public void setByteVarIsSet(boolean value) {
    __isset_bit_vector.set(__BYTEVAR_ISSET_ID, value);
  }

  public short getI16Var() {
    return this.i16Var;
  }

  public void setI16Var(short i16Var) {
    this.i16Var = i16Var;
    setI16VarIsSet(true);
  }

  public void unsetI16Var() {
    __isset_bit_vector.clear(__I16VAR_ISSET_ID);
  }

  /** Returns true if field i16Var is set (has been assigned a value) and false otherwise */
  public boolean isSetI16Var() {
    return __isset_bit_vector.get(__I16VAR_ISSET_ID);
  }

  public void setI16VarIsSet(boolean value) {
    __isset_bit_vector.set(__I16VAR_ISSET_ID, value);
  }

  public int getI32Var() {
    return this.i32Var;
  }

  public void setI32Var(int i32Var) {
    this.i32Var = i32Var;
    setI32VarIsSet(true);
  }

  public void unsetI32Var() {
    __isset_bit_vector.clear(__I32VAR_ISSET_ID);
  }

  /** Returns true if field i32Var is set (has been assigned a value) and false otherwise */
  public boolean isSetI32Var() {
    return __isset_bit_vector.get(__I32VAR_ISSET_ID);
  }

  public void setI32VarIsSet(boolean value) {
    __isset_bit_vector.set(__I32VAR_ISSET_ID, value);
  }

  public long getI64Var() {
    return this.i64Var;
  }

  public void setI64Var(long i64Var) {
    this.i64Var = i64Var;
    setI64VarIsSet(true);
  }

  public void unsetI64Var() {
    __isset_bit_vector.clear(__I64VAR_ISSET_ID);
  }

  /** Returns true if field i64Var is set (has been assigned a value) and false otherwise */
  public boolean isSetI64Var() {
    return __isset_bit_vector.get(__I64VAR_ISSET_ID);
  }

  public void setI64VarIsSet(boolean value) {
    __isset_bit_vector.set(__I64VAR_ISSET_ID, value);
  }

  public double getDoubleVar() {
    return this.doubleVar;
  }

  public void setDoubleVar(double doubleVar) {
    this.doubleVar = doubleVar;
    setDoubleVarIsSet(true);
  }

  public void unsetDoubleVar() {
    __isset_bit_vector.clear(__DOUBLEVAR_ISSET_ID);
  }

  /** Returns true if field doubleVar is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleVar() {
    return __isset_bit_vector.get(__DOUBLEVAR_ISSET_ID);
  }

  public void setDoubleVarIsSet(boolean value) {
    __isset_bit_vector.set(__DOUBLEVAR_ISSET_ID, value);
  }

  public String getStringVar() {
    return this.stringVar;
  }

  public void setStringVar(String stringVar) {
    this.stringVar = stringVar;
  }

  public void unsetStringVar() {
    this.stringVar = null;
  }

  /** Returns true if field stringVar is set (has been assigned a value) and false otherwise */
  public boolean isSetStringVar() {
    return this.stringVar != null;
  }

  public void setStringVarIsSet(boolean value) {
    if (!value) {
      this.stringVar = null;
    }
  }

  public byte[] getBinaryVar() {
    setBinaryVar(org.apache.thrift.TBaseHelper.rightSize(binaryVar));
    return binaryVar == null ? null : binaryVar.array();
  }

  public ByteBuffer bufferForBinaryVar() {
    return binaryVar;
  }

  public void setBinaryVar(byte[] binaryVar) {
    setBinaryVar(binaryVar == null ? (ByteBuffer)null : ByteBuffer.wrap(binaryVar));
  }

  public void setBinaryVar(ByteBuffer binaryVar) {
    this.binaryVar = binaryVar;
  }

  public void unsetBinaryVar() {
    this.binaryVar = null;
  }

  /** Returns true if field binaryVar is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryVar() {
    return this.binaryVar != null;
  }

  public void setBinaryVarIsSet(boolean value) {
    if (!value) {
      this.binaryVar = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOL_VAR:
      if (value == null) {
        unsetBoolVar();
      } else {
        setBoolVar((Boolean)value);
      }
      break;

    case BYTE_VAR:
      if (value == null) {
        unsetByteVar();
      } else {
        setByteVar((Byte)value);
      }
      break;

    case I16_VAR:
      if (value == null) {
        unsetI16Var();
      } else {
        setI16Var((Short)value);
      }
      break;

    case I32_VAR:
      if (value == null) {
        unsetI32Var();
      } else {
        setI32Var((Integer)value);
      }
      break;

    case I64_VAR:
      if (value == null) {
        unsetI64Var();
      } else {
        setI64Var((Long)value);
      }
      break;

    case DOUBLE_VAR:
      if (value == null) {
        unsetDoubleVar();
      } else {
        setDoubleVar((Double)value);
      }
      break;

    case STRING_VAR:
      if (value == null) {
        unsetStringVar();
      } else {
        setStringVar((String)value);
      }
      break;

    case BINARY_VAR:
      if (value == null) {
        unsetBinaryVar();
      } else {
        setBinaryVar((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOL_VAR:
      return Boolean.valueOf(isBoolVar());

    case BYTE_VAR:
      return Byte.valueOf(getByteVar());

    case I16_VAR:
      return Short.valueOf(getI16Var());

    case I32_VAR:
      return Integer.valueOf(getI32Var());

    case I64_VAR:
      return Long.valueOf(getI64Var());

    case DOUBLE_VAR:
      return Double.valueOf(getDoubleVar());

    case STRING_VAR:
      return getStringVar();

    case BINARY_VAR:
      return getBinaryVar();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOL_VAR:
      return isSetBoolVar();
    case BYTE_VAR:
      return isSetByteVar();
    case I16_VAR:
      return isSetI16Var();
    case I32_VAR:
      return isSetI32Var();
    case I64_VAR:
      return isSetI64Var();
    case DOUBLE_VAR:
      return isSetDoubleVar();
    case STRING_VAR:
      return isSetStringVar();
    case BINARY_VAR:
      return isSetBinaryVar();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Var)
      return this.equals((Var)that);
    return false;
  }

  public boolean equals(Var that) {
    if (that == null)
      return false;

    boolean this_present_boolVar = true && this.isSetBoolVar();
    boolean that_present_boolVar = true && that.isSetBoolVar();
    if (this_present_boolVar || that_present_boolVar) {
      if (!(this_present_boolVar && that_present_boolVar))
        return false;
      if (this.boolVar != that.boolVar)
        return false;
    }

    boolean this_present_byteVar = true && this.isSetByteVar();
    boolean that_present_byteVar = true && that.isSetByteVar();
    if (this_present_byteVar || that_present_byteVar) {
      if (!(this_present_byteVar && that_present_byteVar))
        return false;
      if (this.byteVar != that.byteVar)
        return false;
    }

    boolean this_present_i16Var = true && this.isSetI16Var();
    boolean that_present_i16Var = true && that.isSetI16Var();
    if (this_present_i16Var || that_present_i16Var) {
      if (!(this_present_i16Var && that_present_i16Var))
        return false;
      if (this.i16Var != that.i16Var)
        return false;
    }

    boolean this_present_i32Var = true && this.isSetI32Var();
    boolean that_present_i32Var = true && that.isSetI32Var();
    if (this_present_i32Var || that_present_i32Var) {
      if (!(this_present_i32Var && that_present_i32Var))
        return false;
      if (this.i32Var != that.i32Var)
        return false;
    }

    boolean this_present_i64Var = true && this.isSetI64Var();
    boolean that_present_i64Var = true && that.isSetI64Var();
    if (this_present_i64Var || that_present_i64Var) {
      if (!(this_present_i64Var && that_present_i64Var))
        return false;
      if (this.i64Var != that.i64Var)
        return false;
    }

    boolean this_present_doubleVar = true && this.isSetDoubleVar();
    boolean that_present_doubleVar = true && that.isSetDoubleVar();
    if (this_present_doubleVar || that_present_doubleVar) {
      if (!(this_present_doubleVar && that_present_doubleVar))
        return false;
      if (this.doubleVar != that.doubleVar)
        return false;
    }

    boolean this_present_stringVar = true && this.isSetStringVar();
    boolean that_present_stringVar = true && that.isSetStringVar();
    if (this_present_stringVar || that_present_stringVar) {
      if (!(this_present_stringVar && that_present_stringVar))
        return false;
      if (!this.stringVar.equals(that.stringVar))
        return false;
    }

    boolean this_present_binaryVar = true && this.isSetBinaryVar();
    boolean that_present_binaryVar = true && that.isSetBinaryVar();
    if (this_present_binaryVar || that_present_binaryVar) {
      if (!(this_present_binaryVar && that_present_binaryVar))
        return false;
      if (!this.binaryVar.equals(that.binaryVar))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Var other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Var typedOther = (Var)other;

    lastComparison = Boolean.valueOf(isSetBoolVar()).compareTo(typedOther.isSetBoolVar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolVar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolVar, typedOther.boolVar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteVar()).compareTo(typedOther.isSetByteVar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteVar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteVar, typedOther.byteVar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16Var()).compareTo(typedOther.isSetI16Var());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16Var()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16Var, typedOther.i16Var);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32Var()).compareTo(typedOther.isSetI32Var());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32Var()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32Var, typedOther.i32Var);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64Var()).compareTo(typedOther.isSetI64Var());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64Var()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64Var, typedOther.i64Var);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleVar()).compareTo(typedOther.isSetDoubleVar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleVar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleVar, typedOther.doubleVar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringVar()).compareTo(typedOther.isSetStringVar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringVar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringVar, typedOther.stringVar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryVar()).compareTo(typedOther.isSetBinaryVar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryVar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryVar, typedOther.binaryVar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Var(");
    boolean first = true;

    if (isSetBoolVar()) {
      sb.append("boolVar:");
      sb.append(this.boolVar);
      first = false;
    }
    if (isSetByteVar()) {
      if (!first) sb.append(", ");
      sb.append("byteVar:");
      sb.append(this.byteVar);
      first = false;
    }
    if (isSetI16Var()) {
      if (!first) sb.append(", ");
      sb.append("i16Var:");
      sb.append(this.i16Var);
      first = false;
    }
    if (isSetI32Var()) {
      if (!first) sb.append(", ");
      sb.append("i32Var:");
      sb.append(this.i32Var);
      first = false;
    }
    if (isSetI64Var()) {
      if (!first) sb.append(", ");
      sb.append("i64Var:");
      sb.append(this.i64Var);
      first = false;
    }
    if (isSetDoubleVar()) {
      if (!first) sb.append(", ");
      sb.append("doubleVar:");
      sb.append(this.doubleVar);
      first = false;
    }
    if (isSetStringVar()) {
      if (!first) sb.append(", ");
      sb.append("stringVar:");
      if (this.stringVar == null) {
        sb.append("null");
      } else {
        sb.append(this.stringVar);
      }
      first = false;
    }
    if (isSetBinaryVar()) {
      if (!first) sb.append(", ");
      sb.append("binaryVar:");
      if (this.binaryVar == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binaryVar, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VarStandardSchemeFactory implements SchemeFactory {
    public VarStandardScheme getScheme() {
      return new VarStandardScheme();
    }
  }

  private static class VarStandardScheme extends StandardScheme<Var> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Var struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOL_VAR
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolVar = iprot.readBool();
              struct.setBoolVarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BYTE_VAR
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byteVar = iprot.readByte();
              struct.setByteVarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I16_VAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.i16Var = iprot.readI16();
              struct.setI16VarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I32_VAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i32Var = iprot.readI32();
              struct.setI32VarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // I64_VAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i64Var = iprot.readI64();
              struct.setI64VarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOUBLE_VAR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleVar = iprot.readDouble();
              struct.setDoubleVarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STRING_VAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringVar = iprot.readString();
              struct.setStringVarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BINARY_VAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binaryVar = iprot.readBinary();
              struct.setBinaryVarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Var struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetBoolVar()) {
        oprot.writeFieldBegin(BOOL_VAR_FIELD_DESC);
        oprot.writeBool(struct.boolVar);
        oprot.writeFieldEnd();
      }
      if (struct.isSetByteVar()) {
        oprot.writeFieldBegin(BYTE_VAR_FIELD_DESC);
        oprot.writeByte(struct.byteVar);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI16Var()) {
        oprot.writeFieldBegin(I16_VAR_FIELD_DESC);
        oprot.writeI16(struct.i16Var);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI32Var()) {
        oprot.writeFieldBegin(I32_VAR_FIELD_DESC);
        oprot.writeI32(struct.i32Var);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI64Var()) {
        oprot.writeFieldBegin(I64_VAR_FIELD_DESC);
        oprot.writeI64(struct.i64Var);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDoubleVar()) {
        oprot.writeFieldBegin(DOUBLE_VAR_FIELD_DESC);
        oprot.writeDouble(struct.doubleVar);
        oprot.writeFieldEnd();
      }
      if (struct.stringVar != null) {
        if (struct.isSetStringVar()) {
          oprot.writeFieldBegin(STRING_VAR_FIELD_DESC);
          oprot.writeString(struct.stringVar);
          oprot.writeFieldEnd();
        }
      }
      if (struct.binaryVar != null) {
        if (struct.isSetBinaryVar()) {
          oprot.writeFieldBegin(BINARY_VAR_FIELD_DESC);
          oprot.writeBinary(struct.binaryVar);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VarTupleSchemeFactory implements SchemeFactory {
    public VarTupleScheme getScheme() {
      return new VarTupleScheme();
    }
  }

  private static class VarTupleScheme extends TupleScheme<Var> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Var struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBoolVar()) {
        optionals.set(0);
      }
      if (struct.isSetByteVar()) {
        optionals.set(1);
      }
      if (struct.isSetI16Var()) {
        optionals.set(2);
      }
      if (struct.isSetI32Var()) {
        optionals.set(3);
      }
      if (struct.isSetI64Var()) {
        optionals.set(4);
      }
      if (struct.isSetDoubleVar()) {
        optionals.set(5);
      }
      if (struct.isSetStringVar()) {
        optionals.set(6);
      }
      if (struct.isSetBinaryVar()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetBoolVar()) {
        oprot.writeBool(struct.boolVar);
      }
      if (struct.isSetByteVar()) {
        oprot.writeByte(struct.byteVar);
      }
      if (struct.isSetI16Var()) {
        oprot.writeI16(struct.i16Var);
      }
      if (struct.isSetI32Var()) {
        oprot.writeI32(struct.i32Var);
      }
      if (struct.isSetI64Var()) {
        oprot.writeI64(struct.i64Var);
      }
      if (struct.isSetDoubleVar()) {
        oprot.writeDouble(struct.doubleVar);
      }
      if (struct.isSetStringVar()) {
        oprot.writeString(struct.stringVar);
      }
      if (struct.isSetBinaryVar()) {
        oprot.writeBinary(struct.binaryVar);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Var struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.boolVar = iprot.readBool();
        struct.setBoolVarIsSet(true);
      }
      if (incoming.get(1)) {
        struct.byteVar = iprot.readByte();
        struct.setByteVarIsSet(true);
      }
      if (incoming.get(2)) {
        struct.i16Var = iprot.readI16();
        struct.setI16VarIsSet(true);
      }
      if (incoming.get(3)) {
        struct.i32Var = iprot.readI32();
        struct.setI32VarIsSet(true);
      }
      if (incoming.get(4)) {
        struct.i64Var = iprot.readI64();
        struct.setI64VarIsSet(true);
      }
      if (incoming.get(5)) {
        struct.doubleVar = iprot.readDouble();
        struct.setDoubleVarIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stringVar = iprot.readString();
        struct.setStringVarIsSet(true);
      }
      if (incoming.get(7)) {
        struct.binaryVar = iprot.readBinary();
        struct.setBinaryVarIsSet(true);
      }
    }
  }

}

