/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.exathunk.genthrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EvalArg implements org.apache.thrift.TBase<EvalArg, EvalArg._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EvalArg");

  private static final org.apache.thrift.protocol.TField RAW_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("rawType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BOOL_ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("boolArg", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField BYTE_ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("byteArg", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField I16_ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("i16Arg", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField I32_ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("i32Arg", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField I64_ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("i64Arg", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DOUBLE_ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleArg", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField STRING_ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("stringArg", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BINARY_ARG_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryArg", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EvalArgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EvalArgTupleSchemeFactory());
  }

  private RawType rawType; // required
  private boolean boolArg; // optional
  private byte byteArg; // optional
  private short i16Arg; // optional
  private int i32Arg; // optional
  private long i64Arg; // optional
  private double doubleArg; // optional
  private String stringArg; // optional
  private ByteBuffer binaryArg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see RawType
     */
    RAW_TYPE((short)1, "rawType"),
    BOOL_ARG((short)2, "boolArg"),
    BYTE_ARG((short)3, "byteArg"),
    I16_ARG((short)4, "i16Arg"),
    I32_ARG((short)5, "i32Arg"),
    I64_ARG((short)6, "i64Arg"),
    DOUBLE_ARG((short)7, "doubleArg"),
    STRING_ARG((short)8, "stringArg"),
    BINARY_ARG((short)9, "binaryArg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RAW_TYPE
          return RAW_TYPE;
        case 2: // BOOL_ARG
          return BOOL_ARG;
        case 3: // BYTE_ARG
          return BYTE_ARG;
        case 4: // I16_ARG
          return I16_ARG;
        case 5: // I32_ARG
          return I32_ARG;
        case 6: // I64_ARG
          return I64_ARG;
        case 7: // DOUBLE_ARG
          return DOUBLE_ARG;
        case 8: // STRING_ARG
          return STRING_ARG;
        case 9: // BINARY_ARG
          return BINARY_ARG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLARG_ISSET_ID = 0;
  private static final int __BYTEARG_ISSET_ID = 1;
  private static final int __I16ARG_ISSET_ID = 2;
  private static final int __I32ARG_ISSET_ID = 3;
  private static final int __I64ARG_ISSET_ID = 4;
  private static final int __DOUBLEARG_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  private _Fields optionals[] = {_Fields.BOOL_ARG,_Fields.BYTE_ARG,_Fields.I16_ARG,_Fields.I32_ARG,_Fields.I64_ARG,_Fields.DOUBLE_ARG,_Fields.STRING_ARG,_Fields.BINARY_ARG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RAW_TYPE, new org.apache.thrift.meta_data.FieldMetaData("rawType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RawType.class)));
    tmpMap.put(_Fields.BOOL_ARG, new org.apache.thrift.meta_data.FieldMetaData("boolArg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_ARG, new org.apache.thrift.meta_data.FieldMetaData("byteArg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.I16_ARG, new org.apache.thrift.meta_data.FieldMetaData("i16Arg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.I32_ARG, new org.apache.thrift.meta_data.FieldMetaData("i32Arg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I64_ARG, new org.apache.thrift.meta_data.FieldMetaData("i64Arg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_ARG, new org.apache.thrift.meta_data.FieldMetaData("doubleArg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_ARG, new org.apache.thrift.meta_data.FieldMetaData("stringArg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BINARY_ARG, new org.apache.thrift.meta_data.FieldMetaData("binaryArg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EvalArg.class, metaDataMap);
  }

  public EvalArg() {
  }

  public EvalArg(
    RawType rawType)
  {
    this();
    this.rawType = rawType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EvalArg(EvalArg other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetRawType()) {
      this.rawType = other.rawType;
    }
    this.boolArg = other.boolArg;
    this.byteArg = other.byteArg;
    this.i16Arg = other.i16Arg;
    this.i32Arg = other.i32Arg;
    this.i64Arg = other.i64Arg;
    this.doubleArg = other.doubleArg;
    if (other.isSetStringArg()) {
      this.stringArg = other.stringArg;
    }
    if (other.isSetBinaryArg()) {
      this.binaryArg = org.apache.thrift.TBaseHelper.copyBinary(other.binaryArg);
;
    }
  }

  public EvalArg deepCopy() {
    return new EvalArg(this);
  }

  @Override
  public void clear() {
    this.rawType = null;
    setBoolArgIsSet(false);
    this.boolArg = false;
    setByteArgIsSet(false);
    this.byteArg = 0;
    setI16ArgIsSet(false);
    this.i16Arg = 0;
    setI32ArgIsSet(false);
    this.i32Arg = 0;
    setI64ArgIsSet(false);
    this.i64Arg = 0;
    setDoubleArgIsSet(false);
    this.doubleArg = 0.0;
    this.stringArg = null;
    this.binaryArg = null;
  }

  /**
   * 
   * @see RawType
   */
  public RawType getRawType() {
    return this.rawType;
  }

  /**
   * 
   * @see RawType
   */
  public void setRawType(RawType rawType) {
    this.rawType = rawType;
  }

  public void unsetRawType() {
    this.rawType = null;
  }

  /** Returns true if field rawType is set (has been assigned a value) and false otherwise */
  public boolean isSetRawType() {
    return this.rawType != null;
  }

  public void setRawTypeIsSet(boolean value) {
    if (!value) {
      this.rawType = null;
    }
  }

  public boolean isBoolArg() {
    return this.boolArg;
  }

  public void setBoolArg(boolean boolArg) {
    this.boolArg = boolArg;
    setBoolArgIsSet(true);
  }

  public void unsetBoolArg() {
    __isset_bit_vector.clear(__BOOLARG_ISSET_ID);
  }

  /** Returns true if field boolArg is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolArg() {
    return __isset_bit_vector.get(__BOOLARG_ISSET_ID);
  }

  public void setBoolArgIsSet(boolean value) {
    __isset_bit_vector.set(__BOOLARG_ISSET_ID, value);
  }

  public byte getByteArg() {
    return this.byteArg;
  }

  public void setByteArg(byte byteArg) {
    this.byteArg = byteArg;
    setByteArgIsSet(true);
  }

  public void unsetByteArg() {
    __isset_bit_vector.clear(__BYTEARG_ISSET_ID);
  }

  /** Returns true if field byteArg is set (has been assigned a value) and false otherwise */
  public boolean isSetByteArg() {
    return __isset_bit_vector.get(__BYTEARG_ISSET_ID);
  }

  public void setByteArgIsSet(boolean value) {
    __isset_bit_vector.set(__BYTEARG_ISSET_ID, value);
  }

  public short getI16Arg() {
    return this.i16Arg;
  }

  public void setI16Arg(short i16Arg) {
    this.i16Arg = i16Arg;
    setI16ArgIsSet(true);
  }

  public void unsetI16Arg() {
    __isset_bit_vector.clear(__I16ARG_ISSET_ID);
  }

  /** Returns true if field i16Arg is set (has been assigned a value) and false otherwise */
  public boolean isSetI16Arg() {
    return __isset_bit_vector.get(__I16ARG_ISSET_ID);
  }

  public void setI16ArgIsSet(boolean value) {
    __isset_bit_vector.set(__I16ARG_ISSET_ID, value);
  }

  public int getI32Arg() {
    return this.i32Arg;
  }

  public void setI32Arg(int i32Arg) {
    this.i32Arg = i32Arg;
    setI32ArgIsSet(true);
  }

  public void unsetI32Arg() {
    __isset_bit_vector.clear(__I32ARG_ISSET_ID);
  }

  /** Returns true if field i32Arg is set (has been assigned a value) and false otherwise */
  public boolean isSetI32Arg() {
    return __isset_bit_vector.get(__I32ARG_ISSET_ID);
  }

  public void setI32ArgIsSet(boolean value) {
    __isset_bit_vector.set(__I32ARG_ISSET_ID, value);
  }

  public long getI64Arg() {
    return this.i64Arg;
  }

  public void setI64Arg(long i64Arg) {
    this.i64Arg = i64Arg;
    setI64ArgIsSet(true);
  }

  public void unsetI64Arg() {
    __isset_bit_vector.clear(__I64ARG_ISSET_ID);
  }

  /** Returns true if field i64Arg is set (has been assigned a value) and false otherwise */
  public boolean isSetI64Arg() {
    return __isset_bit_vector.get(__I64ARG_ISSET_ID);
  }

  public void setI64ArgIsSet(boolean value) {
    __isset_bit_vector.set(__I64ARG_ISSET_ID, value);
  }

  public double getDoubleArg() {
    return this.doubleArg;
  }

  public void setDoubleArg(double doubleArg) {
    this.doubleArg = doubleArg;
    setDoubleArgIsSet(true);
  }

  public void unsetDoubleArg() {
    __isset_bit_vector.clear(__DOUBLEARG_ISSET_ID);
  }

  /** Returns true if field doubleArg is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleArg() {
    return __isset_bit_vector.get(__DOUBLEARG_ISSET_ID);
  }

  public void setDoubleArgIsSet(boolean value) {
    __isset_bit_vector.set(__DOUBLEARG_ISSET_ID, value);
  }

  public String getStringArg() {
    return this.stringArg;
  }

  public void setStringArg(String stringArg) {
    this.stringArg = stringArg;
  }

  public void unsetStringArg() {
    this.stringArg = null;
  }

  /** Returns true if field stringArg is set (has been assigned a value) and false otherwise */
  public boolean isSetStringArg() {
    return this.stringArg != null;
  }

  public void setStringArgIsSet(boolean value) {
    if (!value) {
      this.stringArg = null;
    }
  }

  public byte[] getBinaryArg() {
    setBinaryArg(org.apache.thrift.TBaseHelper.rightSize(binaryArg));
    return binaryArg == null ? null : binaryArg.array();
  }

  public ByteBuffer bufferForBinaryArg() {
    return binaryArg;
  }

  public void setBinaryArg(byte[] binaryArg) {
    setBinaryArg(binaryArg == null ? (ByteBuffer)null : ByteBuffer.wrap(binaryArg));
  }

  public void setBinaryArg(ByteBuffer binaryArg) {
    this.binaryArg = binaryArg;
  }

  public void unsetBinaryArg() {
    this.binaryArg = null;
  }

  /** Returns true if field binaryArg is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryArg() {
    return this.binaryArg != null;
  }

  public void setBinaryArgIsSet(boolean value) {
    if (!value) {
      this.binaryArg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RAW_TYPE:
      if (value == null) {
        unsetRawType();
      } else {
        setRawType((RawType)value);
      }
      break;

    case BOOL_ARG:
      if (value == null) {
        unsetBoolArg();
      } else {
        setBoolArg((Boolean)value);
      }
      break;

    case BYTE_ARG:
      if (value == null) {
        unsetByteArg();
      } else {
        setByteArg((Byte)value);
      }
      break;

    case I16_ARG:
      if (value == null) {
        unsetI16Arg();
      } else {
        setI16Arg((Short)value);
      }
      break;

    case I32_ARG:
      if (value == null) {
        unsetI32Arg();
      } else {
        setI32Arg((Integer)value);
      }
      break;

    case I64_ARG:
      if (value == null) {
        unsetI64Arg();
      } else {
        setI64Arg((Long)value);
      }
      break;

    case DOUBLE_ARG:
      if (value == null) {
        unsetDoubleArg();
      } else {
        setDoubleArg((Double)value);
      }
      break;

    case STRING_ARG:
      if (value == null) {
        unsetStringArg();
      } else {
        setStringArg((String)value);
      }
      break;

    case BINARY_ARG:
      if (value == null) {
        unsetBinaryArg();
      } else {
        setBinaryArg((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RAW_TYPE:
      return getRawType();

    case BOOL_ARG:
      return Boolean.valueOf(isBoolArg());

    case BYTE_ARG:
      return Byte.valueOf(getByteArg());

    case I16_ARG:
      return Short.valueOf(getI16Arg());

    case I32_ARG:
      return Integer.valueOf(getI32Arg());

    case I64_ARG:
      return Long.valueOf(getI64Arg());

    case DOUBLE_ARG:
      return Double.valueOf(getDoubleArg());

    case STRING_ARG:
      return getStringArg();

    case BINARY_ARG:
      return getBinaryArg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RAW_TYPE:
      return isSetRawType();
    case BOOL_ARG:
      return isSetBoolArg();
    case BYTE_ARG:
      return isSetByteArg();
    case I16_ARG:
      return isSetI16Arg();
    case I32_ARG:
      return isSetI32Arg();
    case I64_ARG:
      return isSetI64Arg();
    case DOUBLE_ARG:
      return isSetDoubleArg();
    case STRING_ARG:
      return isSetStringArg();
    case BINARY_ARG:
      return isSetBinaryArg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EvalArg)
      return this.equals((EvalArg)that);
    return false;
  }

  public boolean equals(EvalArg that) {
    if (that == null)
      return false;

    boolean this_present_rawType = true && this.isSetRawType();
    boolean that_present_rawType = true && that.isSetRawType();
    if (this_present_rawType || that_present_rawType) {
      if (!(this_present_rawType && that_present_rawType))
        return false;
      if (!this.rawType.equals(that.rawType))
        return false;
    }

    boolean this_present_boolArg = true && this.isSetBoolArg();
    boolean that_present_boolArg = true && that.isSetBoolArg();
    if (this_present_boolArg || that_present_boolArg) {
      if (!(this_present_boolArg && that_present_boolArg))
        return false;
      if (this.boolArg != that.boolArg)
        return false;
    }

    boolean this_present_byteArg = true && this.isSetByteArg();
    boolean that_present_byteArg = true && that.isSetByteArg();
    if (this_present_byteArg || that_present_byteArg) {
      if (!(this_present_byteArg && that_present_byteArg))
        return false;
      if (this.byteArg != that.byteArg)
        return false;
    }

    boolean this_present_i16Arg = true && this.isSetI16Arg();
    boolean that_present_i16Arg = true && that.isSetI16Arg();
    if (this_present_i16Arg || that_present_i16Arg) {
      if (!(this_present_i16Arg && that_present_i16Arg))
        return false;
      if (this.i16Arg != that.i16Arg)
        return false;
    }

    boolean this_present_i32Arg = true && this.isSetI32Arg();
    boolean that_present_i32Arg = true && that.isSetI32Arg();
    if (this_present_i32Arg || that_present_i32Arg) {
      if (!(this_present_i32Arg && that_present_i32Arg))
        return false;
      if (this.i32Arg != that.i32Arg)
        return false;
    }

    boolean this_present_i64Arg = true && this.isSetI64Arg();
    boolean that_present_i64Arg = true && that.isSetI64Arg();
    if (this_present_i64Arg || that_present_i64Arg) {
      if (!(this_present_i64Arg && that_present_i64Arg))
        return false;
      if (this.i64Arg != that.i64Arg)
        return false;
    }

    boolean this_present_doubleArg = true && this.isSetDoubleArg();
    boolean that_present_doubleArg = true && that.isSetDoubleArg();
    if (this_present_doubleArg || that_present_doubleArg) {
      if (!(this_present_doubleArg && that_present_doubleArg))
        return false;
      if (this.doubleArg != that.doubleArg)
        return false;
    }

    boolean this_present_stringArg = true && this.isSetStringArg();
    boolean that_present_stringArg = true && that.isSetStringArg();
    if (this_present_stringArg || that_present_stringArg) {
      if (!(this_present_stringArg && that_present_stringArg))
        return false;
      if (!this.stringArg.equals(that.stringArg))
        return false;
    }

    boolean this_present_binaryArg = true && this.isSetBinaryArg();
    boolean that_present_binaryArg = true && that.isSetBinaryArg();
    if (this_present_binaryArg || that_present_binaryArg) {
      if (!(this_present_binaryArg && that_present_binaryArg))
        return false;
      if (!this.binaryArg.equals(that.binaryArg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(EvalArg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    EvalArg typedOther = (EvalArg)other;

    lastComparison = Boolean.valueOf(isSetRawType()).compareTo(typedOther.isSetRawType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRawType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rawType, typedOther.rawType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolArg()).compareTo(typedOther.isSetBoolArg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolArg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolArg, typedOther.boolArg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByteArg()).compareTo(typedOther.isSetByteArg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByteArg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byteArg, typedOther.byteArg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16Arg()).compareTo(typedOther.isSetI16Arg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16Arg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16Arg, typedOther.i16Arg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32Arg()).compareTo(typedOther.isSetI32Arg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32Arg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32Arg, typedOther.i32Arg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64Arg()).compareTo(typedOther.isSetI64Arg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64Arg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64Arg, typedOther.i64Arg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleArg()).compareTo(typedOther.isSetDoubleArg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleArg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleArg, typedOther.doubleArg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringArg()).compareTo(typedOther.isSetStringArg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringArg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringArg, typedOther.stringArg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinaryArg()).compareTo(typedOther.isSetBinaryArg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryArg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryArg, typedOther.binaryArg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EvalArg(");
    boolean first = true;

    sb.append("rawType:");
    if (this.rawType == null) {
      sb.append("null");
    } else {
      sb.append(this.rawType);
    }
    first = false;
    if (isSetBoolArg()) {
      if (!first) sb.append(", ");
      sb.append("boolArg:");
      sb.append(this.boolArg);
      first = false;
    }
    if (isSetByteArg()) {
      if (!first) sb.append(", ");
      sb.append("byteArg:");
      sb.append(this.byteArg);
      first = false;
    }
    if (isSetI16Arg()) {
      if (!first) sb.append(", ");
      sb.append("i16Arg:");
      sb.append(this.i16Arg);
      first = false;
    }
    if (isSetI32Arg()) {
      if (!first) sb.append(", ");
      sb.append("i32Arg:");
      sb.append(this.i32Arg);
      first = false;
    }
    if (isSetI64Arg()) {
      if (!first) sb.append(", ");
      sb.append("i64Arg:");
      sb.append(this.i64Arg);
      first = false;
    }
    if (isSetDoubleArg()) {
      if (!first) sb.append(", ");
      sb.append("doubleArg:");
      sb.append(this.doubleArg);
      first = false;
    }
    if (isSetStringArg()) {
      if (!first) sb.append(", ");
      sb.append("stringArg:");
      if (this.stringArg == null) {
        sb.append("null");
      } else {
        sb.append(this.stringArg);
      }
      first = false;
    }
    if (isSetBinaryArg()) {
      if (!first) sb.append(", ");
      sb.append("binaryArg:");
      if (this.binaryArg == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binaryArg, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetRawType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rawType' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EvalArgStandardSchemeFactory implements SchemeFactory {
    public EvalArgStandardScheme getScheme() {
      return new EvalArgStandardScheme();
    }
  }

  private static class EvalArgStandardScheme extends StandardScheme<EvalArg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EvalArg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RAW_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rawType = RawType.findByValue(iprot.readI32());
              struct.setRawTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOOL_ARG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolArg = iprot.readBool();
              struct.setBoolArgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BYTE_ARG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byteArg = iprot.readByte();
              struct.setByteArgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I16_ARG
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.i16Arg = iprot.readI16();
              struct.setI16ArgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // I32_ARG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i32Arg = iprot.readI32();
              struct.setI32ArgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // I64_ARG
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i64Arg = iprot.readI64();
              struct.setI64ArgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOUBLE_ARG
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.doubleArg = iprot.readDouble();
              struct.setDoubleArgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STRING_ARG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringArg = iprot.readString();
              struct.setStringArgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BINARY_ARG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binaryArg = iprot.readBinary();
              struct.setBinaryArgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EvalArg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rawType != null) {
        oprot.writeFieldBegin(RAW_TYPE_FIELD_DESC);
        oprot.writeI32(struct.rawType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetBoolArg()) {
        oprot.writeFieldBegin(BOOL_ARG_FIELD_DESC);
        oprot.writeBool(struct.boolArg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetByteArg()) {
        oprot.writeFieldBegin(BYTE_ARG_FIELD_DESC);
        oprot.writeByte(struct.byteArg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI16Arg()) {
        oprot.writeFieldBegin(I16_ARG_FIELD_DESC);
        oprot.writeI16(struct.i16Arg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI32Arg()) {
        oprot.writeFieldBegin(I32_ARG_FIELD_DESC);
        oprot.writeI32(struct.i32Arg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI64Arg()) {
        oprot.writeFieldBegin(I64_ARG_FIELD_DESC);
        oprot.writeI64(struct.i64Arg);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDoubleArg()) {
        oprot.writeFieldBegin(DOUBLE_ARG_FIELD_DESC);
        oprot.writeDouble(struct.doubleArg);
        oprot.writeFieldEnd();
      }
      if (struct.stringArg != null) {
        if (struct.isSetStringArg()) {
          oprot.writeFieldBegin(STRING_ARG_FIELD_DESC);
          oprot.writeString(struct.stringArg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.binaryArg != null) {
        if (struct.isSetBinaryArg()) {
          oprot.writeFieldBegin(BINARY_ARG_FIELD_DESC);
          oprot.writeBinary(struct.binaryArg);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EvalArgTupleSchemeFactory implements SchemeFactory {
    public EvalArgTupleScheme getScheme() {
      return new EvalArgTupleScheme();
    }
  }

  private static class EvalArgTupleScheme extends TupleScheme<EvalArg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EvalArg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.rawType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetBoolArg()) {
        optionals.set(0);
      }
      if (struct.isSetByteArg()) {
        optionals.set(1);
      }
      if (struct.isSetI16Arg()) {
        optionals.set(2);
      }
      if (struct.isSetI32Arg()) {
        optionals.set(3);
      }
      if (struct.isSetI64Arg()) {
        optionals.set(4);
      }
      if (struct.isSetDoubleArg()) {
        optionals.set(5);
      }
      if (struct.isSetStringArg()) {
        optionals.set(6);
      }
      if (struct.isSetBinaryArg()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetBoolArg()) {
        oprot.writeBool(struct.boolArg);
      }
      if (struct.isSetByteArg()) {
        oprot.writeByte(struct.byteArg);
      }
      if (struct.isSetI16Arg()) {
        oprot.writeI16(struct.i16Arg);
      }
      if (struct.isSetI32Arg()) {
        oprot.writeI32(struct.i32Arg);
      }
      if (struct.isSetI64Arg()) {
        oprot.writeI64(struct.i64Arg);
      }
      if (struct.isSetDoubleArg()) {
        oprot.writeDouble(struct.doubleArg);
      }
      if (struct.isSetStringArg()) {
        oprot.writeString(struct.stringArg);
      }
      if (struct.isSetBinaryArg()) {
        oprot.writeBinary(struct.binaryArg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EvalArg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.rawType = RawType.findByValue(iprot.readI32());
      struct.setRawTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.boolArg = iprot.readBool();
        struct.setBoolArgIsSet(true);
      }
      if (incoming.get(1)) {
        struct.byteArg = iprot.readByte();
        struct.setByteArgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.i16Arg = iprot.readI16();
        struct.setI16ArgIsSet(true);
      }
      if (incoming.get(3)) {
        struct.i32Arg = iprot.readI32();
        struct.setI32ArgIsSet(true);
      }
      if (incoming.get(4)) {
        struct.i64Arg = iprot.readI64();
        struct.setI64ArgIsSet(true);
      }
      if (incoming.get(5)) {
        struct.doubleArg = iprot.readDouble();
        struct.setDoubleArgIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stringArg = iprot.readString();
        struct.setStringArgIsSet(true);
      }
      if (incoming.get(7)) {
        struct.binaryArg = iprot.readBinary();
        struct.setBinaryArgIsSet(true);
      }
    }
  }

}

