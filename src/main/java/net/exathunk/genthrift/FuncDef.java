/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.exathunk.genthrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Function definition
 */
public class FuncDef implements org.apache.thrift.TBase<FuncDef, FuncDef._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FuncDef");

  private static final org.apache.thrift.protocol.TField FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("funcId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ARG_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("argTypes", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STRICTNESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("strictnesses", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FuncDefStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FuncDefTupleSchemeFactory());
  }

  private FuncId funcId; // required
  private List<ContType> argTypes; // required
  private List<Strictness> strictnesses; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FUNC_ID((short)1, "funcId"),
    ARG_TYPES((short)2, "argTypes"),
    STRICTNESSES((short)3, "strictnesses");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FUNC_ID
          return FUNC_ID;
        case 2: // ARG_TYPES
          return ARG_TYPES;
        case 3: // STRICTNESSES
          return STRICTNESSES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.STRICTNESSES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("funcId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FuncId.class)));
    tmpMap.put(_Fields.ARG_TYPES, new org.apache.thrift.meta_data.FieldMetaData("argTypes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ContType.class))));
    tmpMap.put(_Fields.STRICTNESSES, new org.apache.thrift.meta_data.FieldMetaData("strictnesses", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Strictness.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FuncDef.class, metaDataMap);
  }

  public FuncDef() {
  }

  public FuncDef(
    FuncId funcId,
    List<ContType> argTypes)
  {
    this();
    this.funcId = funcId;
    this.argTypes = argTypes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FuncDef(FuncDef other) {
    if (other.isSetFuncId()) {
      this.funcId = new FuncId(other.funcId);
    }
    if (other.isSetArgTypes()) {
      List<ContType> __this__argTypes = new ArrayList<ContType>();
      for (ContType other_element : other.argTypes) {
        __this__argTypes.add(other_element);
      }
      this.argTypes = __this__argTypes;
    }
    if (other.isSetStrictnesses()) {
      List<Strictness> __this__strictnesses = new ArrayList<Strictness>();
      for (Strictness other_element : other.strictnesses) {
        __this__strictnesses.add(other_element);
      }
      this.strictnesses = __this__strictnesses;
    }
  }

  public FuncDef deepCopy() {
    return new FuncDef(this);
  }

  @Override
  public void clear() {
    this.funcId = null;
    this.argTypes = null;
    this.strictnesses = null;
  }

  public FuncId getFuncId() {
    return this.funcId;
  }

  public void setFuncId(FuncId funcId) {
    this.funcId = funcId;
  }

  public void unsetFuncId() {
    this.funcId = null;
  }

  /** Returns true if field funcId is set (has been assigned a value) and false otherwise */
  public boolean isSetFuncId() {
    return this.funcId != null;
  }

  public void setFuncIdIsSet(boolean value) {
    if (!value) {
      this.funcId = null;
    }
  }

  public int getArgTypesSize() {
    return (this.argTypes == null) ? 0 : this.argTypes.size();
  }

  public java.util.Iterator<ContType> getArgTypesIterator() {
    return (this.argTypes == null) ? null : this.argTypes.iterator();
  }

  public void addToArgTypes(ContType elem) {
    if (this.argTypes == null) {
      this.argTypes = new ArrayList<ContType>();
    }
    this.argTypes.add(elem);
  }

  public List<ContType> getArgTypes() {
    return this.argTypes;
  }

  public void setArgTypes(List<ContType> argTypes) {
    this.argTypes = argTypes;
  }

  public void unsetArgTypes() {
    this.argTypes = null;
  }

  /** Returns true if field argTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetArgTypes() {
    return this.argTypes != null;
  }

  public void setArgTypesIsSet(boolean value) {
    if (!value) {
      this.argTypes = null;
    }
  }

  public int getStrictnessesSize() {
    return (this.strictnesses == null) ? 0 : this.strictnesses.size();
  }

  public java.util.Iterator<Strictness> getStrictnessesIterator() {
    return (this.strictnesses == null) ? null : this.strictnesses.iterator();
  }

  public void addToStrictnesses(Strictness elem) {
    if (this.strictnesses == null) {
      this.strictnesses = new ArrayList<Strictness>();
    }
    this.strictnesses.add(elem);
  }

  public List<Strictness> getStrictnesses() {
    return this.strictnesses;
  }

  public void setStrictnesses(List<Strictness> strictnesses) {
    this.strictnesses = strictnesses;
  }

  public void unsetStrictnesses() {
    this.strictnesses = null;
  }

  /** Returns true if field strictnesses is set (has been assigned a value) and false otherwise */
  public boolean isSetStrictnesses() {
    return this.strictnesses != null;
  }

  public void setStrictnessesIsSet(boolean value) {
    if (!value) {
      this.strictnesses = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FUNC_ID:
      if (value == null) {
        unsetFuncId();
      } else {
        setFuncId((FuncId)value);
      }
      break;

    case ARG_TYPES:
      if (value == null) {
        unsetArgTypes();
      } else {
        setArgTypes((List<ContType>)value);
      }
      break;

    case STRICTNESSES:
      if (value == null) {
        unsetStrictnesses();
      } else {
        setStrictnesses((List<Strictness>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FUNC_ID:
      return getFuncId();

    case ARG_TYPES:
      return getArgTypes();

    case STRICTNESSES:
      return getStrictnesses();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FUNC_ID:
      return isSetFuncId();
    case ARG_TYPES:
      return isSetArgTypes();
    case STRICTNESSES:
      return isSetStrictnesses();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FuncDef)
      return this.equals((FuncDef)that);
    return false;
  }

  public boolean equals(FuncDef that) {
    if (that == null)
      return false;

    boolean this_present_funcId = true && this.isSetFuncId();
    boolean that_present_funcId = true && that.isSetFuncId();
    if (this_present_funcId || that_present_funcId) {
      if (!(this_present_funcId && that_present_funcId))
        return false;
      if (!this.funcId.equals(that.funcId))
        return false;
    }

    boolean this_present_argTypes = true && this.isSetArgTypes();
    boolean that_present_argTypes = true && that.isSetArgTypes();
    if (this_present_argTypes || that_present_argTypes) {
      if (!(this_present_argTypes && that_present_argTypes))
        return false;
      if (!this.argTypes.equals(that.argTypes))
        return false;
    }

    boolean this_present_strictnesses = true && this.isSetStrictnesses();
    boolean that_present_strictnesses = true && that.isSetStrictnesses();
    if (this_present_strictnesses || that_present_strictnesses) {
      if (!(this_present_strictnesses && that_present_strictnesses))
        return false;
      if (!this.strictnesses.equals(that.strictnesses))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FuncDef other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FuncDef typedOther = (FuncDef)other;

    lastComparison = Boolean.valueOf(isSetFuncId()).compareTo(typedOther.isSetFuncId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFuncId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funcId, typedOther.funcId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgTypes()).compareTo(typedOther.isSetArgTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argTypes, typedOther.argTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrictnesses()).compareTo(typedOther.isSetStrictnesses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrictnesses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strictnesses, typedOther.strictnesses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FuncDef(");
    boolean first = true;

    sb.append("funcId:");
    if (this.funcId == null) {
      sb.append("null");
    } else {
      sb.append(this.funcId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("argTypes:");
    if (this.argTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.argTypes);
    }
    first = false;
    if (isSetStrictnesses()) {
      if (!first) sb.append(", ");
      sb.append("strictnesses:");
      if (this.strictnesses == null) {
        sb.append("null");
      } else {
        sb.append(this.strictnesses);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetFuncId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'funcId' is unset! Struct:" + toString());
    }

    if (!isSetArgTypes()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'argTypes' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FuncDefStandardSchemeFactory implements SchemeFactory {
    public FuncDefStandardScheme getScheme() {
      return new FuncDefStandardScheme();
    }
  }

  private static class FuncDefStandardScheme extends StandardScheme<FuncDef> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FuncDef struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FUNC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.funcId = new FuncId();
              struct.funcId.read(iprot);
              struct.setFuncIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARG_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.argTypes = new ArrayList<ContType>(_list42.size);
                for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                {
                  ContType _elem44; // required
                  _elem44 = ContType.findByValue(iprot.readI32());
                  struct.argTypes.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setArgTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRICTNESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
                struct.strictnesses = new ArrayList<Strictness>(_list45.size);
                for (int _i46 = 0; _i46 < _list45.size; ++_i46)
                {
                  Strictness _elem47; // required
                  _elem47 = Strictness.findByValue(iprot.readI32());
                  struct.strictnesses.add(_elem47);
                }
                iprot.readListEnd();
              }
              struct.setStrictnessesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FuncDef struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.funcId != null) {
        oprot.writeFieldBegin(FUNC_ID_FIELD_DESC);
        struct.funcId.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.argTypes != null) {
        oprot.writeFieldBegin(ARG_TYPES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.argTypes.size()));
          for (ContType _iter48 : struct.argTypes)
          {
            oprot.writeI32(_iter48.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.strictnesses != null) {
        if (struct.isSetStrictnesses()) {
          oprot.writeFieldBegin(STRICTNESSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.strictnesses.size()));
            for (Strictness _iter49 : struct.strictnesses)
            {
              oprot.writeI32(_iter49.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FuncDefTupleSchemeFactory implements SchemeFactory {
    public FuncDefTupleScheme getScheme() {
      return new FuncDefTupleScheme();
    }
  }

  private static class FuncDefTupleScheme extends TupleScheme<FuncDef> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FuncDef struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.funcId.write(oprot);
      {
        oprot.writeI32(struct.argTypes.size());
        for (ContType _iter50 : struct.argTypes)
        {
          oprot.writeI32(_iter50.getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetStrictnesses()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetStrictnesses()) {
        {
          oprot.writeI32(struct.strictnesses.size());
          for (Strictness _iter51 : struct.strictnesses)
          {
            oprot.writeI32(_iter51.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FuncDef struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.funcId = new FuncId();
      struct.funcId.read(iprot);
      struct.setFuncIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.argTypes = new ArrayList<ContType>(_list52.size);
        for (int _i53 = 0; _i53 < _list52.size; ++_i53)
        {
          ContType _elem54; // required
          _elem54 = ContType.findByValue(iprot.readI32());
          struct.argTypes.add(_elem54);
        }
      }
      struct.setArgTypesIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.strictnesses = new ArrayList<Strictness>(_list55.size);
          for (int _i56 = 0; _i56 < _list55.size; ++_i56)
          {
            Strictness _elem57; // required
            _elem57 = Strictness.findByValue(iprot.readI32());
            struct.strictnesses.add(_elem57);
          }
        }
        struct.setStrictnessesIsSet(true);
      }
    }
  }

}

