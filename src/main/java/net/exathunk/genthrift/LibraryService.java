/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.exathunk.genthrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LibraryService {

  public interface Iface {

    public FuncDef getFuncDef(FuncId funcId) throws UnknownFuncException, org.apache.thrift.TException;

    public List<FuncDef> getFuncDefs(List<FuncId> funcIds) throws UnknownFuncException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getFuncDef(FuncId funcId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFuncDef_call> resultHandler) throws org.apache.thrift.TException;

    public void getFuncDefs(List<FuncId> funcIds, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getFuncDefs_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public FuncDef getFuncDef(FuncId funcId) throws UnknownFuncException, org.apache.thrift.TException
    {
      send_getFuncDef(funcId);
      return recv_getFuncDef();
    }

    public void send_getFuncDef(FuncId funcId) throws org.apache.thrift.TException
    {
      getFuncDef_args args = new getFuncDef_args();
      args.setFuncId(funcId);
      sendBase("getFuncDef", args);
    }

    public FuncDef recv_getFuncDef() throws UnknownFuncException, org.apache.thrift.TException
    {
      getFuncDef_result result = new getFuncDef_result();
      receiveBase(result, "getFuncDef");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknown != null) {
        throw result.unknown;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFuncDef failed: unknown result");
    }

    public List<FuncDef> getFuncDefs(List<FuncId> funcIds) throws UnknownFuncException, org.apache.thrift.TException
    {
      send_getFuncDefs(funcIds);
      return recv_getFuncDefs();
    }

    public void send_getFuncDefs(List<FuncId> funcIds) throws org.apache.thrift.TException
    {
      getFuncDefs_args args = new getFuncDefs_args();
      args.setFuncIds(funcIds);
      sendBase("getFuncDefs", args);
    }

    public List<FuncDef> recv_getFuncDefs() throws UnknownFuncException, org.apache.thrift.TException
    {
      getFuncDefs_result result = new getFuncDefs_result();
      receiveBase(result, "getFuncDefs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknown != null) {
        throw result.unknown;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFuncDefs failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getFuncDef(FuncId funcId, org.apache.thrift.async.AsyncMethodCallback<getFuncDef_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFuncDef_call method_call = new getFuncDef_call(funcId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFuncDef_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FuncId funcId;
      public getFuncDef_call(FuncId funcId, org.apache.thrift.async.AsyncMethodCallback<getFuncDef_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.funcId = funcId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFuncDef", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFuncDef_args args = new getFuncDef_args();
        args.setFuncId(funcId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FuncDef getResult() throws UnknownFuncException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFuncDef();
      }
    }

    public void getFuncDefs(List<FuncId> funcIds, org.apache.thrift.async.AsyncMethodCallback<getFuncDefs_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFuncDefs_call method_call = new getFuncDefs_call(funcIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFuncDefs_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<FuncId> funcIds;
      public getFuncDefs_call(List<FuncId> funcIds, org.apache.thrift.async.AsyncMethodCallback<getFuncDefs_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.funcIds = funcIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFuncDefs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFuncDefs_args args = new getFuncDefs_args();
        args.setFuncIds(funcIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FuncDef> getResult() throws UnknownFuncException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFuncDefs();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getFuncDef", new getFuncDef());
      processMap.put("getFuncDefs", new getFuncDefs());
      return processMap;
    }

    private static class getFuncDef<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFuncDef_args> {
      public getFuncDef() {
        super("getFuncDef");
      }

      protected getFuncDef_args getEmptyArgsInstance() {
        return new getFuncDef_args();
      }

      protected getFuncDef_result getResult(I iface, getFuncDef_args args) throws org.apache.thrift.TException {
        getFuncDef_result result = new getFuncDef_result();
        try {
          result.success = iface.getFuncDef(args.funcId);
        } catch (UnknownFuncException unknown) {
          result.unknown = unknown;
        }
        return result;
      }
    }

    private static class getFuncDefs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFuncDefs_args> {
      public getFuncDefs() {
        super("getFuncDefs");
      }

      protected getFuncDefs_args getEmptyArgsInstance() {
        return new getFuncDefs_args();
      }

      protected getFuncDefs_result getResult(I iface, getFuncDefs_args args) throws org.apache.thrift.TException {
        getFuncDefs_result result = new getFuncDefs_result();
        try {
          result.success = iface.getFuncDefs(args.funcIds);
        } catch (UnknownFuncException unknown) {
          result.unknown = unknown;
        }
        return result;
      }
    }

  }

  public static class getFuncDef_args implements org.apache.thrift.TBase<getFuncDef_args, getFuncDef_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFuncDef_args");

    private static final org.apache.thrift.protocol.TField FUNC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("funcId", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFuncDef_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFuncDef_argsTupleSchemeFactory());
    }

    private FuncId funcId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUNC_ID((short)1, "funcId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUNC_ID
            return FUNC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUNC_ID, new org.apache.thrift.meta_data.FieldMetaData("funcId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FuncId.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFuncDef_args.class, metaDataMap);
    }

    public getFuncDef_args() {
    }

    public getFuncDef_args(
      FuncId funcId)
    {
      this();
      this.funcId = funcId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFuncDef_args(getFuncDef_args other) {
      if (other.isSetFuncId()) {
        this.funcId = new FuncId(other.funcId);
      }
    }

    public getFuncDef_args deepCopy() {
      return new getFuncDef_args(this);
    }

    @Override
    public void clear() {
      this.funcId = null;
    }

    public FuncId getFuncId() {
      return this.funcId;
    }

    public void setFuncId(FuncId funcId) {
      this.funcId = funcId;
    }

    public void unsetFuncId() {
      this.funcId = null;
    }

    /** Returns true if field funcId is set (has been assigned a value) and false otherwise */
    public boolean isSetFuncId() {
      return this.funcId != null;
    }

    public void setFuncIdIsSet(boolean value) {
      if (!value) {
        this.funcId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUNC_ID:
        if (value == null) {
          unsetFuncId();
        } else {
          setFuncId((FuncId)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUNC_ID:
        return getFuncId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUNC_ID:
        return isSetFuncId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFuncDef_args)
        return this.equals((getFuncDef_args)that);
      return false;
    }

    public boolean equals(getFuncDef_args that) {
      if (that == null)
        return false;

      boolean this_present_funcId = true && this.isSetFuncId();
      boolean that_present_funcId = true && that.isSetFuncId();
      if (this_present_funcId || that_present_funcId) {
        if (!(this_present_funcId && that_present_funcId))
          return false;
        if (!this.funcId.equals(that.funcId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFuncDef_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFuncDef_args typedOther = (getFuncDef_args)other;

      lastComparison = Boolean.valueOf(isSetFuncId()).compareTo(typedOther.isSetFuncId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFuncId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funcId, typedOther.funcId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFuncDef_args(");
      boolean first = true;

      sb.append("funcId:");
      if (this.funcId == null) {
        sb.append("null");
      } else {
        sb.append(this.funcId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFuncDef_argsStandardSchemeFactory implements SchemeFactory {
      public getFuncDef_argsStandardScheme getScheme() {
        return new getFuncDef_argsStandardScheme();
      }
    }

    private static class getFuncDef_argsStandardScheme extends StandardScheme<getFuncDef_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFuncDef_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUNC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.funcId = new FuncId();
                struct.funcId.read(iprot);
                struct.setFuncIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFuncDef_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.funcId != null) {
          oprot.writeFieldBegin(FUNC_ID_FIELD_DESC);
          struct.funcId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFuncDef_argsTupleSchemeFactory implements SchemeFactory {
      public getFuncDef_argsTupleScheme getScheme() {
        return new getFuncDef_argsTupleScheme();
      }
    }

    private static class getFuncDef_argsTupleScheme extends TupleScheme<getFuncDef_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFuncDef_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFuncId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFuncId()) {
          struct.funcId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFuncDef_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.funcId = new FuncId();
          struct.funcId.read(iprot);
          struct.setFuncIdIsSet(true);
        }
      }
    }

  }

  public static class getFuncDef_result implements org.apache.thrift.TBase<getFuncDef_result, getFuncDef_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFuncDef_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFuncDef_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFuncDef_resultTupleSchemeFactory());
    }

    private FuncDef success; // required
    private UnknownFuncException unknown; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN((short)1, "unknown");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN
            return UNKNOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FuncDef.class)));
      tmpMap.put(_Fields.UNKNOWN, new org.apache.thrift.meta_data.FieldMetaData("unknown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFuncDef_result.class, metaDataMap);
    }

    public getFuncDef_result() {
    }

    public getFuncDef_result(
      FuncDef success,
      UnknownFuncException unknown)
    {
      this();
      this.success = success;
      this.unknown = unknown;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFuncDef_result(getFuncDef_result other) {
      if (other.isSetSuccess()) {
        this.success = new FuncDef(other.success);
      }
      if (other.isSetUnknown()) {
        this.unknown = new UnknownFuncException(other.unknown);
      }
    }

    public getFuncDef_result deepCopy() {
      return new getFuncDef_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unknown = null;
    }

    public FuncDef getSuccess() {
      return this.success;
    }

    public void setSuccess(FuncDef success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnknownFuncException getUnknown() {
      return this.unknown;
    }

    public void setUnknown(UnknownFuncException unknown) {
      this.unknown = unknown;
    }

    public void unsetUnknown() {
      this.unknown = null;
    }

    /** Returns true if field unknown is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown() {
      return this.unknown != null;
    }

    public void setUnknownIsSet(boolean value) {
      if (!value) {
        this.unknown = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FuncDef)value);
        }
        break;

      case UNKNOWN:
        if (value == null) {
          unsetUnknown();
        } else {
          setUnknown((UnknownFuncException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNKNOWN:
        return getUnknown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN:
        return isSetUnknown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFuncDef_result)
        return this.equals((getFuncDef_result)that);
      return false;
    }

    public boolean equals(getFuncDef_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unknown = true && this.isSetUnknown();
      boolean that_present_unknown = true && that.isSetUnknown();
      if (this_present_unknown || that_present_unknown) {
        if (!(this_present_unknown && that_present_unknown))
          return false;
        if (!this.unknown.equals(that.unknown))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFuncDef_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFuncDef_result typedOther = (getFuncDef_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown()).compareTo(typedOther.isSetUnknown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown, typedOther.unknown);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFuncDef_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown:");
      if (this.unknown == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFuncDef_resultStandardSchemeFactory implements SchemeFactory {
      public getFuncDef_resultStandardScheme getScheme() {
        return new getFuncDef_resultStandardScheme();
      }
    }

    private static class getFuncDef_resultStandardScheme extends StandardScheme<getFuncDef_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFuncDef_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FuncDef();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown = new UnknownFuncException();
                struct.unknown.read(iprot);
                struct.setUnknownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFuncDef_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unknown != null) {
          oprot.writeFieldBegin(UNKNOWN_FIELD_DESC);
          struct.unknown.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFuncDef_resultTupleSchemeFactory implements SchemeFactory {
      public getFuncDef_resultTupleScheme getScheme() {
        return new getFuncDef_resultTupleScheme();
      }
    }

    private static class getFuncDef_resultTupleScheme extends TupleScheme<getFuncDef_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFuncDef_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknown()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUnknown()) {
          struct.unknown.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFuncDef_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new FuncDef();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknown = new UnknownFuncException();
          struct.unknown.read(iprot);
          struct.setUnknownIsSet(true);
        }
      }
    }

  }

  public static class getFuncDefs_args implements org.apache.thrift.TBase<getFuncDefs_args, getFuncDefs_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFuncDefs_args");

    private static final org.apache.thrift.protocol.TField FUNC_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("funcIds", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFuncDefs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFuncDefs_argsTupleSchemeFactory());
    }

    private List<FuncId> funcIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUNC_IDS((short)1, "funcIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUNC_IDS
            return FUNC_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUNC_IDS, new org.apache.thrift.meta_data.FieldMetaData("funcIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FuncId.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFuncDefs_args.class, metaDataMap);
    }

    public getFuncDefs_args() {
    }

    public getFuncDefs_args(
      List<FuncId> funcIds)
    {
      this();
      this.funcIds = funcIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFuncDefs_args(getFuncDefs_args other) {
      if (other.isSetFuncIds()) {
        List<FuncId> __this__funcIds = new ArrayList<FuncId>();
        for (FuncId other_element : other.funcIds) {
          __this__funcIds.add(new FuncId(other_element));
        }
        this.funcIds = __this__funcIds;
      }
    }

    public getFuncDefs_args deepCopy() {
      return new getFuncDefs_args(this);
    }

    @Override
    public void clear() {
      this.funcIds = null;
    }

    public int getFuncIdsSize() {
      return (this.funcIds == null) ? 0 : this.funcIds.size();
    }

    public java.util.Iterator<FuncId> getFuncIdsIterator() {
      return (this.funcIds == null) ? null : this.funcIds.iterator();
    }

    public void addToFuncIds(FuncId elem) {
      if (this.funcIds == null) {
        this.funcIds = new ArrayList<FuncId>();
      }
      this.funcIds.add(elem);
    }

    public List<FuncId> getFuncIds() {
      return this.funcIds;
    }

    public void setFuncIds(List<FuncId> funcIds) {
      this.funcIds = funcIds;
    }

    public void unsetFuncIds() {
      this.funcIds = null;
    }

    /** Returns true if field funcIds is set (has been assigned a value) and false otherwise */
    public boolean isSetFuncIds() {
      return this.funcIds != null;
    }

    public void setFuncIdsIsSet(boolean value) {
      if (!value) {
        this.funcIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FUNC_IDS:
        if (value == null) {
          unsetFuncIds();
        } else {
          setFuncIds((List<FuncId>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FUNC_IDS:
        return getFuncIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FUNC_IDS:
        return isSetFuncIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFuncDefs_args)
        return this.equals((getFuncDefs_args)that);
      return false;
    }

    public boolean equals(getFuncDefs_args that) {
      if (that == null)
        return false;

      boolean this_present_funcIds = true && this.isSetFuncIds();
      boolean that_present_funcIds = true && that.isSetFuncIds();
      if (this_present_funcIds || that_present_funcIds) {
        if (!(this_present_funcIds && that_present_funcIds))
          return false;
        if (!this.funcIds.equals(that.funcIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFuncDefs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFuncDefs_args typedOther = (getFuncDefs_args)other;

      lastComparison = Boolean.valueOf(isSetFuncIds()).compareTo(typedOther.isSetFuncIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFuncIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.funcIds, typedOther.funcIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFuncDefs_args(");
      boolean first = true;

      sb.append("funcIds:");
      if (this.funcIds == null) {
        sb.append("null");
      } else {
        sb.append(this.funcIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFuncDefs_argsStandardSchemeFactory implements SchemeFactory {
      public getFuncDefs_argsStandardScheme getScheme() {
        return new getFuncDefs_argsStandardScheme();
      }
    }

    private static class getFuncDefs_argsStandardScheme extends StandardScheme<getFuncDefs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFuncDefs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUNC_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.funcIds = new ArrayList<FuncId>(_list66.size);
                  for (int _i67 = 0; _i67 < _list66.size; ++_i67)
                  {
                    FuncId _elem68; // required
                    _elem68 = new FuncId();
                    _elem68.read(iprot);
                    struct.funcIds.add(_elem68);
                  }
                  iprot.readListEnd();
                }
                struct.setFuncIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFuncDefs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.funcIds != null) {
          oprot.writeFieldBegin(FUNC_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.funcIds.size()));
            for (FuncId _iter69 : struct.funcIds)
            {
              _iter69.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFuncDefs_argsTupleSchemeFactory implements SchemeFactory {
      public getFuncDefs_argsTupleScheme getScheme() {
        return new getFuncDefs_argsTupleScheme();
      }
    }

    private static class getFuncDefs_argsTupleScheme extends TupleScheme<getFuncDefs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFuncDefs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFuncIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFuncIds()) {
          {
            oprot.writeI32(struct.funcIds.size());
            for (FuncId _iter70 : struct.funcIds)
            {
              _iter70.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFuncDefs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.funcIds = new ArrayList<FuncId>(_list71.size);
            for (int _i72 = 0; _i72 < _list71.size; ++_i72)
            {
              FuncId _elem73; // required
              _elem73 = new FuncId();
              _elem73.read(iprot);
              struct.funcIds.add(_elem73);
            }
          }
          struct.setFuncIdsIsSet(true);
        }
      }
    }

  }

  public static class getFuncDefs_result implements org.apache.thrift.TBase<getFuncDefs_result, getFuncDefs_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFuncDefs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFuncDefs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFuncDefs_resultTupleSchemeFactory());
    }

    private List<FuncDef> success; // required
    private UnknownFuncException unknown; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN((short)1, "unknown");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN
            return UNKNOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FuncDef.class))));
      tmpMap.put(_Fields.UNKNOWN, new org.apache.thrift.meta_data.FieldMetaData("unknown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFuncDefs_result.class, metaDataMap);
    }

    public getFuncDefs_result() {
    }

    public getFuncDefs_result(
      List<FuncDef> success,
      UnknownFuncException unknown)
    {
      this();
      this.success = success;
      this.unknown = unknown;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFuncDefs_result(getFuncDefs_result other) {
      if (other.isSetSuccess()) {
        List<FuncDef> __this__success = new ArrayList<FuncDef>();
        for (FuncDef other_element : other.success) {
          __this__success.add(new FuncDef(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetUnknown()) {
        this.unknown = new UnknownFuncException(other.unknown);
      }
    }

    public getFuncDefs_result deepCopy() {
      return new getFuncDefs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unknown = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FuncDef> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FuncDef elem) {
      if (this.success == null) {
        this.success = new ArrayList<FuncDef>();
      }
      this.success.add(elem);
    }

    public List<FuncDef> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<FuncDef> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnknownFuncException getUnknown() {
      return this.unknown;
    }

    public void setUnknown(UnknownFuncException unknown) {
      this.unknown = unknown;
    }

    public void unsetUnknown() {
      this.unknown = null;
    }

    /** Returns true if field unknown is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown() {
      return this.unknown != null;
    }

    public void setUnknownIsSet(boolean value) {
      if (!value) {
        this.unknown = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FuncDef>)value);
        }
        break;

      case UNKNOWN:
        if (value == null) {
          unsetUnknown();
        } else {
          setUnknown((UnknownFuncException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNKNOWN:
        return getUnknown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN:
        return isSetUnknown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFuncDefs_result)
        return this.equals((getFuncDefs_result)that);
      return false;
    }

    public boolean equals(getFuncDefs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unknown = true && this.isSetUnknown();
      boolean that_present_unknown = true && that.isSetUnknown();
      if (this_present_unknown || that_present_unknown) {
        if (!(this_present_unknown && that_present_unknown))
          return false;
        if (!this.unknown.equals(that.unknown))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getFuncDefs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getFuncDefs_result typedOther = (getFuncDefs_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown()).compareTo(typedOther.isSetUnknown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown, typedOther.unknown);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFuncDefs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown:");
      if (this.unknown == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFuncDefs_resultStandardSchemeFactory implements SchemeFactory {
      public getFuncDefs_resultStandardScheme getScheme() {
        return new getFuncDefs_resultStandardScheme();
      }
    }

    private static class getFuncDefs_resultStandardScheme extends StandardScheme<getFuncDefs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFuncDefs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.success = new ArrayList<FuncDef>(_list74.size);
                  for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                  {
                    FuncDef _elem76; // required
                    _elem76 = new FuncDef();
                    _elem76.read(iprot);
                    struct.success.add(_elem76);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown = new UnknownFuncException();
                struct.unknown.read(iprot);
                struct.setUnknownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFuncDefs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FuncDef _iter77 : struct.success)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.unknown != null) {
          oprot.writeFieldBegin(UNKNOWN_FIELD_DESC);
          struct.unknown.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFuncDefs_resultTupleSchemeFactory implements SchemeFactory {
      public getFuncDefs_resultTupleScheme getScheme() {
        return new getFuncDefs_resultTupleScheme();
      }
    }

    private static class getFuncDefs_resultTupleScheme extends TupleScheme<getFuncDefs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFuncDefs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknown()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FuncDef _iter78 : struct.success)
            {
              _iter78.write(oprot);
            }
          }
        }
        if (struct.isSetUnknown()) {
          struct.unknown.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFuncDefs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FuncDef>(_list79.size);
            for (int _i80 = 0; _i80 < _list79.size; ++_i80)
            {
              FuncDef _elem81; // required
              _elem81 = new FuncDef();
              _elem81.read(iprot);
              struct.success.add(_elem81);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknown = new UnknownFuncException();
          struct.unknown.read(iprot);
          struct.setUnknownIsSet(true);
        }
      }
    }

  }

}
