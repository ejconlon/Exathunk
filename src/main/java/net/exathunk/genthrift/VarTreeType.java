/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.exathunk.genthrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The type of a tree of VarConts.  Inner nodes can have labels
 * of a different type from branch node values.
 */
public class VarTreeType implements org.apache.thrift.TBase<VarTreeType, VarTreeType._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VarTreeType");

  private static final org.apache.thrift.protocol.TField LABEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("labelType", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("valueType", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VarTreeTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VarTreeTypeTupleSchemeFactory());
  }

  private VarContType labelType; // required
  private VarContType valueType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LABEL_TYPE((short)1, "labelType"),
    VALUE_TYPE((short)2, "valueType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LABEL_TYPE
          return LABEL_TYPE;
        case 2: // VALUE_TYPE
          return VALUE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LABEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("labelType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VarContType.class)));
    tmpMap.put(_Fields.VALUE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("valueType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VarContType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VarTreeType.class, metaDataMap);
  }

  public VarTreeType() {
  }

  public VarTreeType(
    VarContType labelType,
    VarContType valueType)
  {
    this();
    this.labelType = labelType;
    this.valueType = valueType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VarTreeType(VarTreeType other) {
    if (other.isSetLabelType()) {
      this.labelType = new VarContType(other.labelType);
    }
    if (other.isSetValueType()) {
      this.valueType = new VarContType(other.valueType);
    }
  }

  public VarTreeType deepCopy() {
    return new VarTreeType(this);
  }

  @Override
  public void clear() {
    this.labelType = null;
    this.valueType = null;
  }

  public VarContType getLabelType() {
    return this.labelType;
  }

  public void setLabelType(VarContType labelType) {
    this.labelType = labelType;
  }

  public void unsetLabelType() {
    this.labelType = null;
  }

  /** Returns true if field labelType is set (has been assigned a value) and false otherwise */
  public boolean isSetLabelType() {
    return this.labelType != null;
  }

  public void setLabelTypeIsSet(boolean value) {
    if (!value) {
      this.labelType = null;
    }
  }

  public VarContType getValueType() {
    return this.valueType;
  }

  public void setValueType(VarContType valueType) {
    this.valueType = valueType;
  }

  public void unsetValueType() {
    this.valueType = null;
  }

  /** Returns true if field valueType is set (has been assigned a value) and false otherwise */
  public boolean isSetValueType() {
    return this.valueType != null;
  }

  public void setValueTypeIsSet(boolean value) {
    if (!value) {
      this.valueType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LABEL_TYPE:
      if (value == null) {
        unsetLabelType();
      } else {
        setLabelType((VarContType)value);
      }
      break;

    case VALUE_TYPE:
      if (value == null) {
        unsetValueType();
      } else {
        setValueType((VarContType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LABEL_TYPE:
      return getLabelType();

    case VALUE_TYPE:
      return getValueType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LABEL_TYPE:
      return isSetLabelType();
    case VALUE_TYPE:
      return isSetValueType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VarTreeType)
      return this.equals((VarTreeType)that);
    return false;
  }

  public boolean equals(VarTreeType that) {
    if (that == null)
      return false;

    boolean this_present_labelType = true && this.isSetLabelType();
    boolean that_present_labelType = true && that.isSetLabelType();
    if (this_present_labelType || that_present_labelType) {
      if (!(this_present_labelType && that_present_labelType))
        return false;
      if (!this.labelType.equals(that.labelType))
        return false;
    }

    boolean this_present_valueType = true && this.isSetValueType();
    boolean that_present_valueType = true && that.isSetValueType();
    if (this_present_valueType || that_present_valueType) {
      if (!(this_present_valueType && that_present_valueType))
        return false;
      if (!this.valueType.equals(that.valueType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(VarTreeType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    VarTreeType typedOther = (VarTreeType)other;

    lastComparison = Boolean.valueOf(isSetLabelType()).compareTo(typedOther.isSetLabelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLabelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.labelType, typedOther.labelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueType()).compareTo(typedOther.isSetValueType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueType, typedOther.valueType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VarTreeType(");
    boolean first = true;

    sb.append("labelType:");
    if (this.labelType == null) {
      sb.append("null");
    } else {
      sb.append(this.labelType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueType:");
    if (this.valueType == null) {
      sb.append("null");
    } else {
      sb.append(this.valueType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetLabelType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'labelType' is unset! Struct:" + toString());
    }

    if (!isSetValueType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'valueType' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VarTreeTypeStandardSchemeFactory implements SchemeFactory {
    public VarTreeTypeStandardScheme getScheme() {
      return new VarTreeTypeStandardScheme();
    }
  }

  private static class VarTreeTypeStandardScheme extends StandardScheme<VarTreeType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VarTreeType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LABEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.labelType = new VarContType();
              struct.labelType.read(iprot);
              struct.setLabelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.valueType = new VarContType();
              struct.valueType.read(iprot);
              struct.setValueTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VarTreeType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.labelType != null) {
        oprot.writeFieldBegin(LABEL_TYPE_FIELD_DESC);
        struct.labelType.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.valueType != null) {
        oprot.writeFieldBegin(VALUE_TYPE_FIELD_DESC);
        struct.valueType.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VarTreeTypeTupleSchemeFactory implements SchemeFactory {
    public VarTreeTypeTupleScheme getScheme() {
      return new VarTreeTypeTupleScheme();
    }
  }

  private static class VarTreeTypeTupleScheme extends TupleScheme<VarTreeType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VarTreeType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.labelType.write(oprot);
      struct.valueType.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VarTreeType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.labelType = new VarContType();
      struct.labelType.read(iprot);
      struct.setLabelTypeIsSet(true);
      struct.valueType = new VarContType();
      struct.valueType.read(iprot);
      struct.setValueTypeIsSet(true);
    }
  }

}

