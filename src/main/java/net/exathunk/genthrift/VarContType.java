/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.exathunk.genthrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A container type and the wrapped types.
 * keyType will be null for all but MAP ContType.
 */
public class VarContType implements org.apache.thrift.TBase<VarContType, VarContType._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("VarContType");

  private static final org.apache.thrift.protocol.TField CONT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("keyType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("valueType", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new VarContTypeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new VarContTypeTupleSchemeFactory());
  }

  private ContType contType; // required
  private VarType keyType; // optional
  private VarType valueType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ContType
     */
    CONT_TYPE((short)1, "contType"),
    /**
     * 
     * @see VarType
     */
    KEY_TYPE((short)2, "keyType"),
    /**
     * 
     * @see VarType
     */
    VALUE_TYPE((short)3, "valueType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONT_TYPE
          return CONT_TYPE;
        case 2: // KEY_TYPE
          return KEY_TYPE;
        case 3: // VALUE_TYPE
          return VALUE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.KEY_TYPE,_Fields.VALUE_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ContType.class)));
    tmpMap.put(_Fields.KEY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("keyType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, VarType.class)));
    tmpMap.put(_Fields.VALUE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("valueType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, VarType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(VarContType.class, metaDataMap);
  }

  public VarContType() {
  }

  public VarContType(
    ContType contType)
  {
    this();
    this.contType = contType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VarContType(VarContType other) {
    if (other.isSetContType()) {
      this.contType = other.contType;
    }
    if (other.isSetKeyType()) {
      this.keyType = other.keyType;
    }
    if (other.isSetValueType()) {
      this.valueType = other.valueType;
    }
  }

  public VarContType deepCopy() {
    return new VarContType(this);
  }

  @Override
  public void clear() {
    this.contType = null;
    this.keyType = null;
    this.valueType = null;
  }

  /**
   * 
   * @see ContType
   */
  public ContType getContType() {
    return this.contType;
  }

  /**
   * 
   * @see ContType
   */
  public void setContType(ContType contType) {
    this.contType = contType;
  }

  public void unsetContType() {
    this.contType = null;
  }

  /** Returns true if field contType is set (has been assigned a value) and false otherwise */
  public boolean isSetContType() {
    return this.contType != null;
  }

  public void setContTypeIsSet(boolean value) {
    if (!value) {
      this.contType = null;
    }
  }

  /**
   * 
   * @see VarType
   */
  public VarType getKeyType() {
    return this.keyType;
  }

  /**
   * 
   * @see VarType
   */
  public void setKeyType(VarType keyType) {
    this.keyType = keyType;
  }

  public void unsetKeyType() {
    this.keyType = null;
  }

  /** Returns true if field keyType is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyType() {
    return this.keyType != null;
  }

  public void setKeyTypeIsSet(boolean value) {
    if (!value) {
      this.keyType = null;
    }
  }

  /**
   * 
   * @see VarType
   */
  public VarType getValueType() {
    return this.valueType;
  }

  /**
   * 
   * @see VarType
   */
  public void setValueType(VarType valueType) {
    this.valueType = valueType;
  }

  public void unsetValueType() {
    this.valueType = null;
  }

  /** Returns true if field valueType is set (has been assigned a value) and false otherwise */
  public boolean isSetValueType() {
    return this.valueType != null;
  }

  public void setValueTypeIsSet(boolean value) {
    if (!value) {
      this.valueType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONT_TYPE:
      if (value == null) {
        unsetContType();
      } else {
        setContType((ContType)value);
      }
      break;

    case KEY_TYPE:
      if (value == null) {
        unsetKeyType();
      } else {
        setKeyType((VarType)value);
      }
      break;

    case VALUE_TYPE:
      if (value == null) {
        unsetValueType();
      } else {
        setValueType((VarType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONT_TYPE:
      return getContType();

    case KEY_TYPE:
      return getKeyType();

    case VALUE_TYPE:
      return getValueType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONT_TYPE:
      return isSetContType();
    case KEY_TYPE:
      return isSetKeyType();
    case VALUE_TYPE:
      return isSetValueType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VarContType)
      return this.equals((VarContType)that);
    return false;
  }

  public boolean equals(VarContType that) {
    if (that == null)
      return false;

    boolean this_present_contType = true && this.isSetContType();
    boolean that_present_contType = true && that.isSetContType();
    if (this_present_contType || that_present_contType) {
      if (!(this_present_contType && that_present_contType))
        return false;
      if (!this.contType.equals(that.contType))
        return false;
    }

    boolean this_present_keyType = true && this.isSetKeyType();
    boolean that_present_keyType = true && that.isSetKeyType();
    if (this_present_keyType || that_present_keyType) {
      if (!(this_present_keyType && that_present_keyType))
        return false;
      if (!this.keyType.equals(that.keyType))
        return false;
    }

    boolean this_present_valueType = true && this.isSetValueType();
    boolean that_present_valueType = true && that.isSetValueType();
    if (this_present_valueType || that_present_valueType) {
      if (!(this_present_valueType && that_present_valueType))
        return false;
      if (!this.valueType.equals(that.valueType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(VarContType other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    VarContType typedOther = (VarContType)other;

    lastComparison = Boolean.valueOf(isSetContType()).compareTo(typedOther.isSetContType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contType, typedOther.contType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyType()).compareTo(typedOther.isSetKeyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyType, typedOther.keyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueType()).compareTo(typedOther.isSetValueType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueType, typedOther.valueType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VarContType(");
    boolean first = true;

    sb.append("contType:");
    if (this.contType == null) {
      sb.append("null");
    } else {
      sb.append(this.contType);
    }
    first = false;
    if (isSetKeyType()) {
      if (!first) sb.append(", ");
      sb.append("keyType:");
      if (this.keyType == null) {
        sb.append("null");
      } else {
        sb.append(this.keyType);
      }
      first = false;
    }
    if (isSetValueType()) {
      if (!first) sb.append(", ");
      sb.append("valueType:");
      if (this.valueType == null) {
        sb.append("null");
      } else {
        sb.append(this.valueType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetContType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contType' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VarContTypeStandardSchemeFactory implements SchemeFactory {
    public VarContTypeStandardScheme getScheme() {
      return new VarContTypeStandardScheme();
    }
  }

  private static class VarContTypeStandardScheme extends StandardScheme<VarContType> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, VarContType struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contType = ContType.findByValue(iprot.readI32());
              struct.setContTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.keyType = VarType.findByValue(iprot.readI32());
              struct.setKeyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.valueType = VarType.findByValue(iprot.readI32());
              struct.setValueTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, VarContType struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contType != null) {
        oprot.writeFieldBegin(CONT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.contType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.keyType != null) {
        if (struct.isSetKeyType()) {
          oprot.writeFieldBegin(KEY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.keyType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.valueType != null) {
        if (struct.isSetValueType()) {
          oprot.writeFieldBegin(VALUE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.valueType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VarContTypeTupleSchemeFactory implements SchemeFactory {
    public VarContTypeTupleScheme getScheme() {
      return new VarContTypeTupleScheme();
    }
  }

  private static class VarContTypeTupleScheme extends TupleScheme<VarContType> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, VarContType struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.contType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetKeyType()) {
        optionals.set(0);
      }
      if (struct.isSetValueType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetKeyType()) {
        oprot.writeI32(struct.keyType.getValue());
      }
      if (struct.isSetValueType()) {
        oprot.writeI32(struct.valueType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, VarContType struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.contType = ContType.findByValue(iprot.readI32());
      struct.setContTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.keyType = VarType.findByValue(iprot.readI32());
        struct.setKeyTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.valueType = VarType.findByValue(iprot.readI32());
        struct.setValueTypeIsSet(true);
      }
    }
  }

}

