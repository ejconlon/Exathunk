/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package net.exathunk.genthrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EvalService {

  /**
   * Submit a closure for evaluation and receive a future.
   */
  public interface Iface {

    public RemoteThunk submitEvalRequest(EvalRequest evalRequest) throws ExecutionException, UnknownFuncException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void submitEvalRequest(EvalRequest evalRequest, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.submitEvalRequest_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public RemoteThunk submitEvalRequest(EvalRequest evalRequest) throws ExecutionException, UnknownFuncException, org.apache.thrift.TException
    {
      send_submitEvalRequest(evalRequest);
      return recv_submitEvalRequest();
    }

    public void send_submitEvalRequest(EvalRequest evalRequest) throws org.apache.thrift.TException
    {
      submitEvalRequest_args args = new submitEvalRequest_args();
      args.setEvalRequest(evalRequest);
      sendBase("submitEvalRequest", args);
    }

    public RemoteThunk recv_submitEvalRequest() throws ExecutionException, UnknownFuncException, org.apache.thrift.TException
    {
      submitEvalRequest_result result = new submitEvalRequest_result();
      receiveBase(result, "submitEvalRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.execution != null) {
        throw result.execution;
      }
      if (result.unknown != null) {
        throw result.unknown;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "submitEvalRequest failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void submitEvalRequest(EvalRequest evalRequest, org.apache.thrift.async.AsyncMethodCallback<submitEvalRequest_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      submitEvalRequest_call method_call = new submitEvalRequest_call(evalRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class submitEvalRequest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private EvalRequest evalRequest;
      public submitEvalRequest_call(EvalRequest evalRequest, org.apache.thrift.async.AsyncMethodCallback<submitEvalRequest_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.evalRequest = evalRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("submitEvalRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        submitEvalRequest_args args = new submitEvalRequest_args();
        args.setEvalRequest(evalRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RemoteThunk getResult() throws ExecutionException, UnknownFuncException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_submitEvalRequest();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("submitEvalRequest", new submitEvalRequest());
      return processMap;
    }

    private static class submitEvalRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, submitEvalRequest_args> {
      public submitEvalRequest() {
        super("submitEvalRequest");
      }

      protected submitEvalRequest_args getEmptyArgsInstance() {
        return new submitEvalRequest_args();
      }

      protected submitEvalRequest_result getResult(I iface, submitEvalRequest_args args) throws org.apache.thrift.TException {
        submitEvalRequest_result result = new submitEvalRequest_result();
        try {
          result.success = iface.submitEvalRequest(args.evalRequest);
        } catch (ExecutionException execution) {
          result.execution = execution;
        } catch (UnknownFuncException unknown) {
          result.unknown = unknown;
        }
        return result;
      }
    }

  }

  public static class submitEvalRequest_args implements org.apache.thrift.TBase<submitEvalRequest_args, submitEvalRequest_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitEvalRequest_args");

    private static final org.apache.thrift.protocol.TField EVAL_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("evalRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitEvalRequest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitEvalRequest_argsTupleSchemeFactory());
    }

    private EvalRequest evalRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVAL_REQUEST((short)1, "evalRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVAL_REQUEST
            return EVAL_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVAL_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("evalRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EvalRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitEvalRequest_args.class, metaDataMap);
    }

    public submitEvalRequest_args() {
    }

    public submitEvalRequest_args(
      EvalRequest evalRequest)
    {
      this();
      this.evalRequest = evalRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitEvalRequest_args(submitEvalRequest_args other) {
      if (other.isSetEvalRequest()) {
        this.evalRequest = new EvalRequest(other.evalRequest);
      }
    }

    public submitEvalRequest_args deepCopy() {
      return new submitEvalRequest_args(this);
    }

    @Override
    public void clear() {
      this.evalRequest = null;
    }

    public EvalRequest getEvalRequest() {
      return this.evalRequest;
    }

    public void setEvalRequest(EvalRequest evalRequest) {
      this.evalRequest = evalRequest;
    }

    public void unsetEvalRequest() {
      this.evalRequest = null;
    }

    /** Returns true if field evalRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetEvalRequest() {
      return this.evalRequest != null;
    }

    public void setEvalRequestIsSet(boolean value) {
      if (!value) {
        this.evalRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EVAL_REQUEST:
        if (value == null) {
          unsetEvalRequest();
        } else {
          setEvalRequest((EvalRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EVAL_REQUEST:
        return getEvalRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EVAL_REQUEST:
        return isSetEvalRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitEvalRequest_args)
        return this.equals((submitEvalRequest_args)that);
      return false;
    }

    public boolean equals(submitEvalRequest_args that) {
      if (that == null)
        return false;

      boolean this_present_evalRequest = true && this.isSetEvalRequest();
      boolean that_present_evalRequest = true && that.isSetEvalRequest();
      if (this_present_evalRequest || that_present_evalRequest) {
        if (!(this_present_evalRequest && that_present_evalRequest))
          return false;
        if (!this.evalRequest.equals(that.evalRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(submitEvalRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      submitEvalRequest_args typedOther = (submitEvalRequest_args)other;

      lastComparison = Boolean.valueOf(isSetEvalRequest()).compareTo(typedOther.isSetEvalRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvalRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evalRequest, typedOther.evalRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitEvalRequest_args(");
      boolean first = true;

      sb.append("evalRequest:");
      if (this.evalRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.evalRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitEvalRequest_argsStandardSchemeFactory implements SchemeFactory {
      public submitEvalRequest_argsStandardScheme getScheme() {
        return new submitEvalRequest_argsStandardScheme();
      }
    }

    private static class submitEvalRequest_argsStandardScheme extends StandardScheme<submitEvalRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitEvalRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVAL_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.evalRequest = new EvalRequest();
                struct.evalRequest.read(iprot);
                struct.setEvalRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitEvalRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.evalRequest != null) {
          oprot.writeFieldBegin(EVAL_REQUEST_FIELD_DESC);
          struct.evalRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitEvalRequest_argsTupleSchemeFactory implements SchemeFactory {
      public submitEvalRequest_argsTupleScheme getScheme() {
        return new submitEvalRequest_argsTupleScheme();
      }
    }

    private static class submitEvalRequest_argsTupleScheme extends TupleScheme<submitEvalRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitEvalRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEvalRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEvalRequest()) {
          struct.evalRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitEvalRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.evalRequest = new EvalRequest();
          struct.evalRequest.read(iprot);
          struct.setEvalRequestIsSet(true);
        }
      }
    }

  }

  public static class submitEvalRequest_result implements org.apache.thrift.TBase<submitEvalRequest_result, submitEvalRequest_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("submitEvalRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXECUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("execution", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UNKNOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new submitEvalRequest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new submitEvalRequest_resultTupleSchemeFactory());
    }

    private RemoteThunk success; // required
    private ExecutionException execution; // required
    private UnknownFuncException unknown; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXECUTION((short)1, "execution"),
      UNKNOWN((short)2, "unknown");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXECUTION
            return EXECUTION;
          case 2: // UNKNOWN
            return UNKNOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RemoteThunk.class)));
      tmpMap.put(_Fields.EXECUTION, new org.apache.thrift.meta_data.FieldMetaData("execution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.UNKNOWN, new org.apache.thrift.meta_data.FieldMetaData("unknown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(submitEvalRequest_result.class, metaDataMap);
    }

    public submitEvalRequest_result() {
    }

    public submitEvalRequest_result(
      RemoteThunk success,
      ExecutionException execution,
      UnknownFuncException unknown)
    {
      this();
      this.success = success;
      this.execution = execution;
      this.unknown = unknown;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public submitEvalRequest_result(submitEvalRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = new RemoteThunk(other.success);
      }
      if (other.isSetExecution()) {
        this.execution = new ExecutionException(other.execution);
      }
      if (other.isSetUnknown()) {
        this.unknown = new UnknownFuncException(other.unknown);
      }
    }

    public submitEvalRequest_result deepCopy() {
      return new submitEvalRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.execution = null;
      this.unknown = null;
    }

    public RemoteThunk getSuccess() {
      return this.success;
    }

    public void setSuccess(RemoteThunk success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ExecutionException getExecution() {
      return this.execution;
    }

    public void setExecution(ExecutionException execution) {
      this.execution = execution;
    }

    public void unsetExecution() {
      this.execution = null;
    }

    /** Returns true if field execution is set (has been assigned a value) and false otherwise */
    public boolean isSetExecution() {
      return this.execution != null;
    }

    public void setExecutionIsSet(boolean value) {
      if (!value) {
        this.execution = null;
      }
    }

    public UnknownFuncException getUnknown() {
      return this.unknown;
    }

    public void setUnknown(UnknownFuncException unknown) {
      this.unknown = unknown;
    }

    public void unsetUnknown() {
      this.unknown = null;
    }

    /** Returns true if field unknown is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown() {
      return this.unknown != null;
    }

    public void setUnknownIsSet(boolean value) {
      if (!value) {
        this.unknown = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RemoteThunk)value);
        }
        break;

      case EXECUTION:
        if (value == null) {
          unsetExecution();
        } else {
          setExecution((ExecutionException)value);
        }
        break;

      case UNKNOWN:
        if (value == null) {
          unsetUnknown();
        } else {
          setUnknown((UnknownFuncException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXECUTION:
        return getExecution();

      case UNKNOWN:
        return getUnknown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXECUTION:
        return isSetExecution();
      case UNKNOWN:
        return isSetUnknown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof submitEvalRequest_result)
        return this.equals((submitEvalRequest_result)that);
      return false;
    }

    public boolean equals(submitEvalRequest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_execution = true && this.isSetExecution();
      boolean that_present_execution = true && that.isSetExecution();
      if (this_present_execution || that_present_execution) {
        if (!(this_present_execution && that_present_execution))
          return false;
        if (!this.execution.equals(that.execution))
          return false;
      }

      boolean this_present_unknown = true && this.isSetUnknown();
      boolean that_present_unknown = true && that.isSetUnknown();
      if (this_present_unknown || that_present_unknown) {
        if (!(this_present_unknown && that_present_unknown))
          return false;
        if (!this.unknown.equals(that.unknown))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(submitEvalRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      submitEvalRequest_result typedOther = (submitEvalRequest_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExecution()).compareTo(typedOther.isSetExecution());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExecution()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execution, typedOther.execution);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown()).compareTo(typedOther.isSetUnknown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown, typedOther.unknown);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("submitEvalRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("execution:");
      if (this.execution == null) {
        sb.append("null");
      } else {
        sb.append(this.execution);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown:");
      if (this.unknown == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class submitEvalRequest_resultStandardSchemeFactory implements SchemeFactory {
      public submitEvalRequest_resultStandardScheme getScheme() {
        return new submitEvalRequest_resultStandardScheme();
      }
    }

    private static class submitEvalRequest_resultStandardScheme extends StandardScheme<submitEvalRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, submitEvalRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RemoteThunk();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXECUTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.execution = new ExecutionException();
                struct.execution.read(iprot);
                struct.setExecutionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNKNOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown = new UnknownFuncException();
                struct.unknown.read(iprot);
                struct.setUnknownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, submitEvalRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.execution != null) {
          oprot.writeFieldBegin(EXECUTION_FIELD_DESC);
          struct.execution.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unknown != null) {
          oprot.writeFieldBegin(UNKNOWN_FIELD_DESC);
          struct.unknown.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class submitEvalRequest_resultTupleSchemeFactory implements SchemeFactory {
      public submitEvalRequest_resultTupleScheme getScheme() {
        return new submitEvalRequest_resultTupleScheme();
      }
    }

    private static class submitEvalRequest_resultTupleScheme extends TupleScheme<submitEvalRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, submitEvalRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExecution()) {
          optionals.set(1);
        }
        if (struct.isSetUnknown()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExecution()) {
          struct.execution.write(oprot);
        }
        if (struct.isSetUnknown()) {
          struct.unknown.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, submitEvalRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new RemoteThunk();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.execution = new ExecutionException();
          struct.execution.read(iprot);
          struct.setExecutionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.unknown = new UnknownFuncException();
          struct.unknown.read(iprot);
          struct.setUnknownIsSet(true);
        }
      }
    }

  }

}
